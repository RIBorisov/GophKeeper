// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/s3/s3.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/s3/s3.go -destination=internal/app/s3/mocks/s3_mock.gen.go -package s3mock
//

// Package s3mock is a generated GoMock package.
package s3mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockS3ClientI is a mock of S3ClientI interface.
type MockS3ClientI struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientIMockRecorder
}

// MockS3ClientIMockRecorder is the mock recorder for MockS3ClientI.
type MockS3ClientIMockRecorder struct {
	mock *MockS3ClientI
}

// NewMockS3ClientI creates a new mock instance.
func NewMockS3ClientI(ctrl *gomock.Controller) *MockS3ClientI {
	mock := &MockS3ClientI{ctrl: ctrl}
	mock.recorder = &MockS3ClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3ClientI) EXPECT() *MockS3ClientIMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3ClientI) GetObject(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3ClientIMockRecorder) GetObject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3ClientI)(nil).GetObject), ctx, name)
}

// PutObject mocks base method.
func (m *MockS3ClientI) PutObject(ctx context.Context, name string, obj io.Reader, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, name, obj, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3ClientIMockRecorder) PutObject(ctx, name, obj, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3ClientI)(nil).PutObject), ctx, name, obj, size)
}
